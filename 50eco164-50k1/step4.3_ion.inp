* GENERATED BY CHARMM-GUI (http://www.charmm-gui.org) v2.0 on Nov, 27. 2018. JOBID=1543333821
* GENERATES ION CONFORMATION USING MONTE-CARLO SIMULATION
* 

DIMENS CHSIZE 3000000 MAXRES 3000000

! Read topology and parameter files
stream toppar.str

define PROT sele all end

!Read the system information
stream step3_size.str
stream step4_components.str

! Read Lipids 
if isglip .eq. YES then
   open read unit 10 card name step4_lipid_glip.psf
   read psf  unit 10 card append

   open read unit 10 card name step4_lipid_glip.crd
   read coor unit 10 card append

   stream step3_glipid.str
endif

if ismemb .eq. YES then
   open read card unit 10 name step4_lipid_lipid.crd
   read sequence coor card unit 10
   generate MEMB setup warn first none last none

   open read unit 10 card name step4_lipid_lipid.crd
   read coor unit 10 card resid
endif

!
! neutralizing the LPS Lipid A with CAL
!

set val   = 2

set lipaiontype = NONE
calc nlipaionup = int(abs(@chrglipaup) / @val)
calc nlipaiondn = int(abs(@chrglipadn) / @val)
calc nlipaion = @nlipaionup + @nlipaiondn 

if nlipaion .eq. 0 goto coreion

!Generate CAL
set lipaiontype = CAL
read sequence @lipaiontype @nlipaion
generate LION warn

define LIPA sele resname *LIP* .and. ( type P* .or. type OP* ) end

if nlipaionup .gt. 0 then
    coor stat sele LIPA .and. prop Z .gt. 0 end
    calc zupmax = ?zmax + 3
    calc zupmin = ?zmin - 3
endif

if nlipaiondn .gt. 0 then
    coor stat sele LIPA .and. prop Z .lt. 0 end
    calc zdnmax = ?zmax + 3
    calc zdnmin = ?zmin - 3
endif

coor set xdir 0.0 ydir 0.0 zdir 0.0 select segid LION end

prnlev 0
calc i   = 1
label dolipaion

    define target select segid LION .and. resid @i end

    if i .le. @nlipaionup then
       calc zpos =  @zupmin + ( @zupmax - @zupmin ) * ?random
    else
       calc zpos =  @zdnmin + ( @zdnmax - @zdnmin ) * ?random
    endif

    calc xpos = @A * ( ?random - 0.5 )
    calc ypos = @B * ( ?random - 0.5 )

    coor set xdir @xpos  ydir @ypos  zdir @zpos select target end

    coor dist cut 6.0 sele target end sele LIPA end
    if ?npair .eq. 0 goto dolipaion

    ! check if the ions are too close to protein
    define XXX sele PROT end
    if ?nsel .gt. 0 then
        coor dist cut 10.0 sele target end -
                           sele PROT .and. .not. hydrogen end
        if ?npair .gt. 0 goto dolipaion
    endif

    ! check if the ions are too close to solute 
    coor dist cut 3.0 sele target end -
                      sele ( .not. target ) .and. .not. hydrogen end
    if ?npair .gt. 0 goto dolipaion

incr i by 1
if i .le. @nlipaion goto dolipaion
prnlev 5

label coreion

!
! neutralizing the LPS Core with CAL
!

set val   = 2

set coreiontype = NONE
calc ncoreionup = int(abs(@chrgcoreup) / @val)
calc ncoreiondn = int(abs(@chrgcoredn) / @val)
calc ncoreion = @ncoreionup + @ncoreiondn 

if ncoreion .eq. 0 goto oantiion

!Generate CAL
set coreiontype = CAL
read sequence @coreiontype @ncoreion
generate CION warn

define CORE sele NONE end
calc ecore = @nlpsacore + 1
define CORE sele CORE .or. ( segid LPSA* .and. resid 2:@ecore ) end
calc ecore = @nkpgcore + 1
define CORE sele CORE .or. ( segid KPG* .and. resid 2:@ecore ) end

if ncoreionup .gt. 0 then
    coor stat sele CORE .and. prop Z .gt. 0 end
    calc zupmax = ?zmax
    calc zupmin = ?zmin
endif

if ncoreiondn .gt. 0 then
    coor stat sele CORE .and. prop Z .lt. 0 end
    calc zdnmax = ?zmax
    calc zdnmin = ?zmin
endif

coor set xdir 0.0 ydir 0.0 zdir 0.0 select segid CION end

prnlev 0
calc i   = 1
label docoreion

    define target select segid CION .and. resid @i end

    if i .le. @ncoreionup then
       calc zpos =  @zupmin + ( @zupmax - @zupmin ) * ?random
    else
       calc zpos =  @zdnmin + ( @zdnmax - @zdnmin ) * ?random
    endif

    calc xpos = @A * ( ?random - 0.5 )
    calc ypos = @B * ( ?random - 0.5 )

    coor set xdir @xpos  ydir @ypos  zdir @zpos select target end

    coor dist cut 6.0 sele target end sele CORE end
    if ?npair .eq. 0 goto docoreion

    ! check if the ions are too close to protein
    define XXX sele PROT end
    if ?nsel .gt. 0 then
        coor dist cut 10.0 sele target end -
                           sele PROT .and. .not. hydrogen end
        if ?npair .gt. 0 goto docoreion
    endif

    ! check if the ions are too close to solute 
    coor dist cut 4.0 sele target end -
                      sele ( .not. target ) .and. .not. hydrogen end
    if ?npair .gt. 0 goto docoreion

incr i by 1
if i .le. @ncoreion goto docoreion
prnlev 5

label oantiion

!
! neutralizing the LPS O-antigen with KCl
!

set val   = 1

calc noantiionup = int(abs(@chrgoantiup) / @val)
calc noantiiondn = int(abs(@chrgoantidn) / @val)
calc noantiion = @noantiionup + @noantiiondn 

if noantiion .eq. 0 goto bulkion

!Generate POT for LPS O-antigen
read sequence POT @noantiion
generate OION warn

define OANTI sele NONE end
calc ecore = @nlpsacore + 1
define OANTI sele OANTI .or. ( segid LPSA* .and. .not. resid 1:@ecore ) end
calc ecore = @nkpgcore + 1
define OANTI sele OANTI .or. ( segid KPG* .and. .not. resid 1:@ecore ) end

if noantiionup .gt. 0 then
    coor stat sele OANTI .and. prop Z .gt. 0 end
    calc zupmax = ?zmax
    calc zupmin = ?zmin
endif

if noantiiondn .gt. 0 then
    coor stat sele OANTI .and. prop Z .lt. 0 end
    calc zdnmax = ?zmax
    calc zdnmin = ?zmin
endif

coor set xdir 0.0 ydir 0.0 zdir 0.0 select segid OION end

prnlev 0
calc i   = 1
label dooantiion

    define target select segid OION .and. resid @i end

    if i .le. @noantiionup then
       calc zpos =  @zupmin + ( @zupmax - @zupmin ) * ?random
    else
       calc zpos =  @zdnmin + ( @zdnmax - @zdnmin ) * ?random
    endif

    calc xpos = @A * ( ?random - 0.5 )
    calc ypos = @B * ( ?random - 0.5 )

    coor set xdir @xpos  ydir @ypos  zdir @zpos select target end

    coor dist cut 6.0 sele target end -
                      sele OANTI end
    if ?npair .eq. 0 goto dooantiion

    ! check if the ions are too close to protein
    define XXX sele PROT end
    if ?nsel .gt. 0 then
        coor dist cut 10.0 sele target end -
                           sele PROT .and. .not. hydrogen end
        if ?npair .gt. 0 goto dooantiion
    endif

    ! check if the ions are too close to solute 
    coor dist cut 4.0 sele target end -
                      sele ( .not. target ) .and. .not. hydrogen end
    if ?npair .gt. 0 goto dooantiion

incr i by 1
if i .le. @noantiion goto dooantiion
prnlev 5

label bulkion

calc ncharge = int( ?cgtot )

!
! Concentration, Volume, and Number of Ions
!

set conc  =  0.15        ! M          
set zmemb =  20.0           ! ion exclusion membrane region
set posval   = 1
set negval   = 1

! protein volume, calculation with a grid spacing of 0.5
coor stat

calc dcel = 0.5
calc xdim = int ( ( ?xmax - ?xmin + 5.0 ) / @dcel ) + 1
calc ydim = int ( ( ?ymax - ?ymin + 5.0 ) / @dcel ) + 1
calc zdim = int ( ( ?zmax - ?zmin + 5.0 ) / @dcel ) + 1
calc space = @xdim * @ydim * @zdim

scalar wmain = radius
scalar wmain add 1.4    ! use solvent accessible surface for molecular volume
scalar 1 = wmain
scalar 2 set 6.0
coor volume hole space @space sele .not. resname TIP3 end

set sysvol = ?volume

IF BOXTYPE .ne. HEXA then
   calc volumn = ( @A * @B * @C ) - @sysvol
ENDIF

IF BOXTYPE .eq. HEXA THEN
   calc A = @A / cos ( 30.0 * ?pi / 180.0 )
   calc B = @B / cos ( 30.0 * ?pi / 180.0 )
   calc C = @C
   calc volumn = ( 3 / 8 * sqrt(3) * @A * @B * @C ) - @sysvol
ENDIF

calc npos = 0
calc nneg = 0
if ncharge .lt. 0 calc npos = int( abs( ?cgtot ) / @posval )
if ncharge .gt. 0 calc nneg = int( abs( ?cgtot ) / @negval )

calc npos = @npos + int ( @conc * 6.021 * 0.0001 * @volumn ) * @negval
calc nneg = @nneg + int ( @conc * 6.021 * 0.0001 * @volumn ) * @posval

calc diff   = int ( ?cgtot + @npos*@posval - @nneg*@negval )
label neutral
   if diff .gt. 0 calc nneg = @nneg + 1
   if diff .lt. 0 calc npos = @npos + 1
   calc diff   = int ( ?cgtot + @npos*@posval - @nneg*@negval )
if diff .ne. 0 goto neutral

if npos .lt. 0 stop ! something wrong
if nneg .lt. 0 stop ! something wrong

!
! Randomly place the ions
!

!Generate POT
if npos .gt. 0 then
   read sequence POT @npos
   generate POT warn
endif

!Generate CLA
if nneg .gt. 0 then
   read sequence CLA @nneg
   generate CLA warn
endif

calc nion = @npos + @nneg
if nion .eq. 0 goto continue

! initial positions for all ions

calc xpos = @A / 2.0
calc ypos = @B / 2.0
calc zpos = @C / 2.0 + @zcen

coor set xdir @xpos ydir @ypos zdir @zpos select segid POT .or. segid CLA end
cons fix sele .not. ( segid POT .or. segid CLA ) end

!
!Energy Setup
!

!Note eps=80, truncation at 10 Angstrom
nbonds atom switch vatom vswitch -
       ctonnb 10.0 ctofnb 10.0 cutnb 11.0 cutim 11.0 -
       inbfrq -1 imgfrq -1 wmin 0.1 cdie eps 80.0

!
! initial placement of ions
!

calc cntrand = 0

calc i   = 1
label doinit

    calc cntrand = @cntrand + 1
    if cntrand .gt. 100 stop ! ion placing may not work.. stop here

    calc j = @i
    set ion = POT

    if j .gt. @npos then
       set ion = CLA
       calc j  = @j - @npos
    endif
    
    define target select segid @ion .and. resid @j end

    calc xpos = @a * ( ?random - 0.5 )
    calc ypos = @b * ( ?random - 0.5 )
    calc zpos = @c * ( ?random - 0.5 ) + @zcen

    if zpos .gt. -15 if zpos .lt. 15 goto doinit
    
    coor set xdir @xpos  ydir @ypos  zdir @zpos select target end

    ! check if the ions are too close to protein
    define XXX sele PROT end
    if ?nsel .gt. 0 then
        coor dist cut 10.0 sele target end -
                           sele PROT .and. .not. hydrogen end
        if ?npair .gt. 0 goto doinit
    endif

    ! check if the ions are too close to solute 
    coor dist cut 4.5 sele target end -
                      sele ( .not. target ) .and. .not. hydrogen end
    if ?npair .gt. 0 goto doinit

calc cntrand = 0
increase i by 1
if i .le. @nion goto doinit

label continue 

define junk sele PROT end
if ?nsel .gt. 0 delete atom sele PROT end

open write unit 10 card name step4.3_ion.psf
write psf  unit 10 card

open write unit 10 card name step4.3_ion.crd
write coor unit 10 card
close unit 10

define POS sele resname POT end

if ?nsel .gt. 0 then
    delete atom sele .not. POS end

    if noantiion .gt. 0 then
        if npos .gt. 0 join OION POT renumber
        rename segid POT sele segid OION end
        calc npos = @npos + @noantiion
    endif
    if coreiontype .eq. POT then
        if npos .gt. 0 join CION POT renumber
        rename segid POT sele segid CION end
        calc npos = @npos + @ncoreion
    endif
    if lipaiontype .eq. POT then
        if npos .gt. 0 join LION POT renumber
        rename segid POT sele segid LION end
        calc npos = @npos + @nlipaion
    endif

    open write unit 10 card name step4.3_pos.crd
    write coor unit 10 card sele segid POT end
    close unit 10

    delete atom sele all end

    open read unit 10 card name step4.3_ion.psf
    read psf  unit 10 card append

    open read unit 10 card name step4.3_ion.crd
    read coor unit 10 card append
endif

define NEG sele resname CLA end

if ?nsel .gt. 0 then
    delete atom sele .not. NEG end

    open write unit 10 card name step4.3_neg.crd
    write coor unit 10 card sele segid CLA end
    close unit 10

    delete atom sele all end

    open read unit 10 card name step4.3_ion.psf
    read psf  unit 10 card append

    open read unit 10 card name step4.3_ion.crd
    read coor unit 10 card append
endif

calc nlpsion = 0
define LPSION sele (resname @lipaiontype .or. resname @coreiontype ) .and. .not. resname POT end

if ?nsel .gt. 0 then
    delete atom sele .not. LPSION end

    if coreiontype .eq. @lipaiontype then
        join LION CION renumber
        rename segid @lipaiontype sele segid LION end
        calc nlpsion = @nlpsion + @nlipaion + @ncoreion
    else
        if lipaiontype .ne. POT then
            rename segid @lipaiontype sele segid LION end
            calc nlpsion = @nlpsion + @nlipaion
        endif
        if coreiontype .ne. POT then
            rename segid @coreiontype sele segid CION end
            calc nlpsion = @nlpsion + @ncoreion
        endif
    endif

    open write unit 10 card name step4.3_lpsion.psf
    write psf  unit 10 card 

    open write unit 10 card name step4.3_lpsion.crd
    write coor unit 10 card
    close unit 10
endif

delete atom sele all end

!==============================================================================
! Read all individuals back
!


! Read Lipids 
if isglip .eq. YES then
   open read unit 10 card name step4_lipid_glip.psf
   read psf  unit 10 card append

   open read unit 10 card name step4_lipid_glip.crd
   read coor unit 10 card append
endif

if ismemb .eq. YES then
   open read card unit 10 name step4_lipid_lipid.crd
   read sequence coor card unit 10
   generate MEMB setup warn first none last none 
   open read unit 10 card name step4_lipid_lipid.crd
   read coor unit 10 card resid
endif

if nlpsion .gt. 0 then
   open read unit 10 card name step4.3_lpsion.psf
   read psf  unit 10 card append

   open read unit 10 card name step4.3_lpsion.crd
   read coor unit 10 card append
endif

if npos .gt. 0 then
   open read card unit 10 name step4.3_pos.crd
   read sequence coor card unit 10
   generate POT setup warn noangle nodihedral

   open read unit 10 card name step4.3_pos.crd
   read coor unit 10 card resid
endif

if nneg .gt. 0 then
   open read card unit 10 name step4.3_neg.crd
   read sequence coor card unit 10
   generate CLA setup warn noangle nodihedral

   open read unit 10 card name step4.3_neg.crd
   read coor unit 10 card resid
endif

!==============================================================================
! Write the coordinates
!

open write unit 10 card name step4.3_ion.psf
write psf  unit 10 card

open write unit 10 card name step4.3_ion.crd
write coor unit 10 card
close unit 10

open write unit 10 card name step4.3_ion.pdb
write coor unit 10 pdb
close unit 10

open write unit 10 card name step4.3_pos.prm
write title unit 10
* set nlpsion = @nlpsion
* set lipaiontype = @lipaiontype
* set coreiontype = @coreiontype
* set npos = @npos ! Number of positive ions
* set nneg = @nneg ! Number of negative ions
* set posid = POT
* set negid = CLA 
*

stop
